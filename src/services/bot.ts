import { Bot, Context, InlineKeyboard, webhookCallback } from 'grammy';
import { DatabaseService } from './database';

const db = new DatabaseService();

export class BotService {
  private bot: Bot;
  private groupChatId: string;

  constructor(token: string, groupChatId: string) {
    this.bot = new Bot(token);
    this.groupChatId = groupChatId;
    this.setupHandlers();
  }

  private setupHandlers() {
    this.bot.use(async (ctx, next) => {
      if (!ctx.from) return ctx.reply('–ö–∞–∫ —Ç—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª?');

      const isMessagePrivate = ctx.chat?.type === 'private';

      const user = await db.getUser(String(ctx.from.id));

      const isUserRegistered = user !== null;

      const isKabanCommand = ctx.message?.text?.startsWith('/kaban');

      if (isKabanCommand && isUserRegistered){
         await next();
      } else {
        // try to call command from group
        if (!isMessagePrivate){
          return ctx.reply('–ù–∞—Ö—É–π —Ç—ã –º–µ–Ω—è –≤ —á–∞—Ç–µ –ø–∏–Ω–≥—É–µ—à—å');
        }

        const isStartCommand = ctx.message?.text?.startsWith('/start');
        // try to call unregistered
        if (!user && !isStartCommand) {
          return ctx.reply('–ü–æ—à–µ–ª –≤ –ø–∏–∑–¥—É! –¢—É—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ª—é–¥–∏ –ø–∞—Ä–æ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª–∏');
        }

        await next();

      }
    });

    this.bot.command('start', async (ctx) => {
      const password = ctx.message?.text?.split(' ')[1];
      if (!password) {
        await ctx.reply('–ê –ø–∞—Ä–æ–ª—å —Ç–æ –∑–Ω–∞—Ç—å –Ω–∞–¥–æ');
        return;
      }
      if (password !== process.env.BOT_PASSWORD){
        await ctx.reply('–ì–æ–Ω–¥–æ–Ω–∞–º –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      await this.handleStart(ctx);
    });

    // Create meeting command
    this.bot.command('kaban', async (ctx) => {
      await this.handleCreateMeeting(ctx);
    });

    // Stats command
    this.bot.command('stats', async (ctx) => {
      await this.handleStats(ctx);
    });

    this.bot.command('meetings', async (ctx) => {
      await this.handleActiveMeetings(ctx);
    });

    this.bot.on('callback_query', async (ctx) => {
      const callbackData = ctx.callbackQuery?.data;
      if (!callbackData) return;

      const actionType = callbackData.split('/')[0];
      const actionPayload = callbackData.split('/')[1];
      switch (actionType) {
        case 'vote':
          await this.handleVoting(actionPayload, ctx);
          break;
        case 'meeting':
          await this.handleMeetingButtonCallback(actionPayload, ctx);
          break;
      }
    });

    // Error handler
    this.bot.catch((err) => {
      console.error('Bot error:', err);
    });
  }

  // payload type ${meeting.id}_[end|cancel]
  private async handleMeetingButtonCallback(actionPayload: string, ctx: Context) {
    const [meetingIdString, action] = actionPayload.split('_');
    const meetingId = Number(meetingIdString);
    const meeting = await db.getMeeting(meetingId);

    if (!meeting || !action) return;

    const user = ctx.from;
    if (!user) return;

    try {
        const meeting = await db.getMeeting(meetingId);
        if (!meeting) {
          await ctx.reply('‚ùå –í—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
          return;
        }

        if (meeting.status !== 'voting') {
          await ctx.reply('‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
          return;
        }

        // Check if user is the creator or admin (you can add admin check here)
        if (meeting.createdBy !== user.id.toString()) {
          await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!');
          return;
        }

        if (action === 'end') {
          await this.sendFinalSummary(meetingId, 'ended');
          await ctx.reply(`‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å—Ç—Ä–µ—á–µ "${meeting.description}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.`);
        }

        if (action === 'cancel') {
          await this.sendFinalSummary(meetingId, 'cancelled');
          await ctx.reply(`‚ùå –ö–∞–±–∞–Ω –≤ "${meeting.time}" –æ—Ç–º–µ–Ω–µ–Ω!`);
        }

    } catch (error) {
      console.error('Error finishing voting:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.');
    }
  }

  private async handleStart(ctx: Context) {
    const user = ctx.from;
    if (!user) return;

    await db.createOrUpdateUser(
      user.id.toString(),
      user.username,
      ctx.chat?.id.toString()
    );

    const welcomeMessage = `
üêó –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ö–∞–±–∞–Ω!

–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è.

–ö–æ–º–∞–Ω–¥—ã:
/kaban <–≤—Ä–µ–º—è> <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É
/meetings - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è

–ü—Ä–∏–º–µ—Ä: /kaban 19:00 –í–ü–ù —à–æ–ø
    `;

    await ctx.reply(welcomeMessage.trim());
  }

  private async handleCreateMeeting(ctx: Context) {
    const telegramUser = ctx.from;
    if (!telegramUser) return;

    // Ensure user exists in database
    const user = await db.getUser(telegramUser.id.toString());

    if (!user) {
      await ctx.reply('–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—è, —É–º–Ω–∏–∫');
      return;
    }

    const args = ctx.message?.text?.split(' ').slice(1);
    if (!args || args.length < 2) {
      await ctx.reply(
        '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π: /kaban <–≤—Ä–µ–º—è> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n' +
        '–ü—Ä–∏–º–µ—Ä: /kaban 19:00 –§–∏–Ω—Å–∫–∏–π'
      );
      return;
    }

    const time = args[0];
    const description = args.slice(1).join(' ');

    // Validate time format (HH:MM)
    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
    if (!timeRegex.test(time)) {
      await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00)');
      return;
    }

    try {
      // Create meeting
      const meeting = await db.createMeeting(time, description, telegramUser.id.toString());

      const keyboard = new InlineKeyboard()
        .text('–ó–∞–≤–µ—Ä—à–∏—Ç—å', `meeting/${meeting.id}_end`)
        .text('–û—Ç–º–µ–Ω–∏—Ç—å', `meeting/${meeting.id}_cancel`);
      const isMessagePrivate = ctx.chat?.type === 'private';

      if (isMessagePrivate) {
        await ctx.reply(
          `‚úÖ –ö–∞–±–∞–Ω —Å–æ–∑–¥–∞–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.`,
          {
            reply_to_message_id: ctx.message?.message_id,
            reply_markup: keyboard
          }
        )
      } else {
        await ctx.api.sendMessage(
          user.chatId,
          `‚úÖ –ö–∞–±–∞–Ω —Å–æ–∑–¥–∞–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.`,
          {  reply_to_message_id: ctx.message?.message_id, reply_markup: keyboard }
        )
      }

      const commonMeetingMessage = `üêó –ü–æ–∫–∞–±–∞–Ω–∏–º—Å—è –≤ ${time}? –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç @${telegramUser.username || telegramUser.first_name}\nüìù ${description}`;

      await Promise.all([
        await this.bot.api.sendMessage(
          this.groupChatId,
          `${commonMeetingMessage.trim()}.\n\n–û—Ç–º–µ—á–∞–π—Ç–µ—Å—å –≤ –ª–∏—á–∫–µ üêó`,
        ),
        await this.notifyAllUsers(meeting.id, commonMeetingMessage.trim()),
      ]);

    } catch (error) {
      console.error('Error creating meeting:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    }
  }

  private async handleStats(ctx: Context) {
    const user = ctx.from;
    if (!user) return;

    try {
      const stats = await db.getUserStats(user.id.toString());

      if (!stats) {
        await ctx.reply('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π –∑–∞ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –≤—Å—Ç—Ä–µ—á—É!');
        return;
      }

      const statsMessage = `
üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–∏—è:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || user.first_name}
üó≥Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: ${stats.totalVotes}
‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞–ª: ${stats.positiveVotes}
‚ùå –°–ª–∏–≤–∞–ª: ${stats.negativeVotes}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—á–∞—Å—Ç–∏—è: ${stats.participationRate}%

${stats.participationRate < 50 ? 'üôà –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ —Å–ª–∏–≤–∞–µ—à—å—Å—è!' : 'üéâ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!'}
      `;

      await ctx.reply(statsMessage.trim());
    } catch (error) {
      console.error('Error getting stats:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  private async handleActiveMeetings(ctx: Context) {
    try {
      const meetings = await db.getActiveMeetings();

      if (meetings.length === 0) {
        await ctx.reply('üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á');
        return;
      }

      let message = 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n';

      for (const meeting of meetings) {
        const participants = meeting.votes.filter(v => v.vote === true);
        const declined = meeting.votes.filter(v => v.vote === false);

        message += `üêó ID: ${meeting.id}\n`;
        message += `‚è∞ –í—Ä–µ–º—è: ${meeting.time}\n`;
        message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${meeting.description}\n`;
        message += `‚úÖ –£—á–∞—Å—Ç–≤—É—é—Ç (${participants.length}): ${participants.map(v => '@' + (v.user.username || 'unknown')).join(', ') || '–Ω–∏–∫—Ç–æ'}\n`;
        message += `‚ùå –°–ª–∏–≤–∞—é—Ç (${declined.length}): ${declined.map(v => '@' + (v.user.username || 'unknown')).join(', ') || '–Ω–∏–∫—Ç–æ'}\n\n`;
      }

      await ctx.reply(message.trim());
    } catch (error) {
      console.error('Error getting active meetings:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á.');
    }
  }

  private async handleVoting(payload: string, ctx: Context) {
    const user = ctx.from;

    if (!user) return;

    const [vote, meetingIdStr] = payload.split('_');

    const meetingId = parseInt(meetingIdStr);
    const voteValue = vote === 'yes';

    try {
      // Ensure user exists
      const dbUser = await db.createOrUpdateUser(
        user.id.toString(),
        user.username,
        ctx.chat?.id.toString()
      );

      // Record vote
      await db.createOrUpdateVote(dbUser.id, meetingId, voteValue);

      // Get meeting details
      const meeting = await db.getMeeting(meetingId);
      if (!meeting) {
        await ctx.answerCallbackQuery('‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const voteText = voteValue ? `–í ${meeting.time} —Å–Ω—é—Ö–∞–µ–º—Å—è` : '–î–∞ –∏ –ø–æ—à–µ–ª —Ç—ã –Ω–∞—Ö—É–π ;)';
      await ctx.answerCallbackQuery(voteText);

      if (voteValue){
        await this.bot.api.sendMessage(this.groupChatId, `‚úÖ @${user.username || user.first_name} –∏–¥–µ—Ç –Ω–∞ –∫–∞–±–∞–Ω–∞ –≤ ${meeting.time}`);
      } else {
        const joke = await db.getRandomShameJoke();
        if (joke) {
          const shameText = joke.text.replace(/{username}/g, user.first_name);
          const fullText = `‚ùå @${user.username || user.first_name} —Å–ª–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–±–∞–Ω–∞\n\n${shameText}`;
          await this.bot.api.sendMessage(this.groupChatId, `${fullText}`);
        }
      }
    } catch (error) {
      console.error('Error handling vote:', error);
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞');
    }
  }

  private async notifyAllUsers(meetingId: number, message: string) {
    try {
      const users = await db.getAllUsers();

      for (const user of users) {
        if (user.chatId) {
          try {
            // Create voting keyboard
            const keyboard = new InlineKeyboard()
              .text('‚úÖ –£—á–∞—Å—Ç–≤—É—é', `vote/yes_${meetingId}_`)
              .text('‚ùå –°–ª–∏–≤–∞—é', `vote/no_${meetingId}`);

            await this.bot.api.sendMessage(
              user.chatId,
              `${message}\n\n–¢—ã –∏–¥–µ—à—å?`,
              { reply_markup: keyboard }
            );
          } catch (error) {
            console.error(`Failed to send message to user ${user.telegramId}:`, error);
          }
        }
      }
    } catch (error) {
      console.error('Error notifying users:', error);
    }
  }

  async sendFinalSummary(meetingId: number, resolution: string) {
    try {
      const meeting = await db.getMeeting(meetingId);
      if (!meeting) return;

      const participants = meeting.votes.filter(v => v.vote === true);
      const declined = meeting.votes.filter(v => v.vote === false);

      let summaryMessage = resolution === 'ended' ? `üèÅ –ò—Ç–æ–≥–∏ –∫–∞–±–∞–Ω–∞ –≤ ${meeting.time}` : `‚ùå –ö–∞–±–∞–Ω –≤ ${meeting.time} –æ—Ç–º–µ–Ω–µ–Ω`;
      summaryMessage += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${meeting.description}\n\n`;

      if (participants.length > 0 && resolution === 'ended') {
        summaryMessage += `‚úÖ –£—á–∞—Å—Ç–≤—É—é—Ç (${participants.length}):\n`;
        participants.forEach(v => {
          summaryMessage += `‚Ä¢ @${v.user.username || 'unknown'}\n`;
        });
        summaryMessage += '\n';
      }

      if (declined.length > 0) {
        summaryMessage += `‚ùå –°–ª–∏—Ç—ã (${declined.length}):\n`;
        declined.forEach(v => {
          summaryMessage += `‚Ä¢ @${v.user.username || 'unknown'}\n`;
        });
        summaryMessage += '\n';

        // Add shame for those who declined
        summaryMessage += `–û–±—â–µ–ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–µ –ø–∏–¥–æ—Ä–∞—Å—ã:\n`;
        for (const vote of declined) {
          const joke = await db.getRandomShameJoke();
          if (joke) {
            const shameText = joke.text.replace(/{username}/g, vote.user.username || 'unknown');
            summaryMessage += `‚Ä¢ ${shameText}\n`;
          }
        }
      }

      await this.bot.api.sendMessage(this.groupChatId, summaryMessage);

      // Update meeting status
      await db.updateMeetingStatus(meetingId, 'completed');

    } catch (error) {
      console.error('Error sending final summary:', error);
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º webhook callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  getWebhookCallback() {
    return webhookCallback(this.bot, 'hono');
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫
  async setWebhook(webhookUrl: string) {
    try {
      await this.bot.api.setWebhook(webhookUrl, {
        secret_token: process.env.WEBHOOK_SECRET,
      });
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª—è–µ–º –≤–µ–±-—Ö—É–∫
  async deleteWebhook() {
    try {
      await this.bot.api.deleteWebhook();
      console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±-—Ö—É–∫–µ
  async getWebhookInfo() {
    try {
      const info = await this.bot.api.getWebhookInfo();
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', info);
      return info;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  async getBotInfo() {
    try {
      const me = await this.bot.api.getMe();
      console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', me);
      return me;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      throw error;
    }
  }

  // –î–ª—è –≤–µ–±-—Ö—É–∫–æ–≤ –Ω–µ –Ω—É–∂–Ω—ã start/stop, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  start() {
    console.log('üêó Boar bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ webhooks!');
  }

  stop() {
    console.log('üêó Boar bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}
